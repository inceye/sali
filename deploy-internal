#!/bin/bash

disk=$1
disk0=$2
keyfilegrub=$3
keypref=$4

# logging fn
log() {
	local color_on=$'\e[0;32m'
	local color_off=$'\e[0m'
	echo "${color_on}[$(date)]${color_off} $@" >&2
}

# error fn
fatal() {
	local color_fatal=$'\033[0;31m'
	log "${color_fatal} $@ Failed!"
	log "${color_fatal}	Error!"
	log "${color_fatal}	Exiting."
	exit 1
}

initial() {
	grep -q initial .progress &&
		log "Skipping prerequisite install" &&
		return

	log "Prerequisite install"
	pacman -S vim sudo || fatal "Pacman"

	echo "initial" >> .progress
}

locale() {
	grep -q locale .progress &&
		log "Skipping locale setup" &&
		return

	log "Setting up locale"
	vim /etc/locale.gen &&
	locale-gen || fatal "Locale"
	
	echo "locale" >> .progress
}

set_user() {
	log "Setting up user"
	read -r -p "Enter your username:" username &&

	grep -q set_user .progress &&
		log "Skipping user setup" &&
		return

	#for slock to work add nobody:nogroup
	groupadd nogroup;
	( sudo useradd nobody -G nogroup || sudo usermod nobody -G nogroup ) &&


	useradd --create-home --groups "wheel" --user-group "$username" &&

	log "Setting up the user password" || fatal "Setting up users and groups"

	while true
	do
		passwd "$username" &&
		break
		log "Try again"
	done

	log "Setting up the root password" || fatal "Setting up users and groups"

	while true
	do
		passwd &&
		break
		log "Try again"
	done

	echo "set_user" >> .progress
}

pacman_setup() {
	grep -q pacman_setup .progress &&
		log "Skipping pacman setup" &&
		return

	log "Setting up pacman"
	cp /linux-autoinstall/system/pacman/pacman.conf /etc/ &&
	pacman -Sy || fatal "Pacman"

	echo "pacman_setup" >> .progress
}

pacman_install() {
	grep -q pacman_install .progress &&
		log "Skipping pacman installations" &&
		return

	log "Installing all needed packages from pacman"
	pacman -S grub efibootmgr reflector autoconf-archive dosfstools\
		texlive-most texlive-bin texlive-lang libreoffice \
		noto-fonts-emoji ttf-droid ttf-dejavu gsfonts fontconfig \
		neovim ranger nnn zathura zathura-pdf-mupdf sxiv \
		jdk8-openjdk jre8-openjdk jre8-openjdk-headless \
		base-devel git rust python2 python3 shellcheck \
        valgrind gdb \
		time bc ufw binwalk traceroute bash-completion \
		dialog wpa_supplicant dhcpcd bind-tools wget iw iwd \
		libnotify espeak-ng dunst speech-dispatcher \
		xorg xorg-xinit libxrender xautolock xclip \
		libinput xf86-video-intel mesa cups hplip \
		diffutils webkit2gtk xorg-xprop gcr \
		xcompmgr feh xorg-setxkbmap \
		pulseaudio pulseaudio-bluetooth \
		zip unzip squashfs-tools gdisk \
		lm_sensors htop iotop powertop \
		pamixer pavucontrol alsa-utils alsa-oss sof-firmware \
		scrot screenkey imagemagick \
		openssh sshfs rsync openvpn \
		bluez bluez-utils blueman \
		firejail stress cpupower \
		mpv mpc mpd youtube-dl \
		system-config-printer \
		lynx elinks firefox \
		pass pass-otp zbar \
		crash \
		mumble toxic || fatal "Packman"
	
	echo "pacman_install" >> .progress
}

sudo_setup() {
	log "Setting up sudo"
	chmod u+w /etc/sudoers &&
	echo "%wheel ALL=(ALL) NOPASSWD: ALL #" >> /etc/sudoers &&
	echo "%wheel ALL=(ALL) NOPASSWD: /usr/local/bin/hibernate, /usr/bin/reboot, /usr/bin/shutdown*" >> /etc/sudoers &&
	echo "Defaults editor=/bin/nvim" >> /etc/sudoers &&
	echo "Defaults insults" >> /etc/sudoers || fatal "Sudo"
	mkdir /etc/sudoers.d || log "/etc/sudoers.d exists"
	cp /linux-autoinstall/system/sudo/privacy /etc/sudoers.d/ &&
	echo "Defaults lecture=always" > /etc/sudoers.d/privacy &&
	chmod u-w /etc/sudoers || fatal "Sudo"
}

install_additional() {
	grep -q install_additional .progress &&
		log "Skipping additional installations" &&
		return

	log "Installing starship"
	cargo install starship --root / || fatal "Starship install"

	log "Installing paru"
	cargo install paru --root / || fatal "Paru install"

	#paru install
	log "Installing some aur packages with paru"

	su "$username" -c -P "paru -S picom-rounded-corners libxft-bgra"

	# optional packages
	while true
	do
		read -r -p "Do you want to install mutt-wizard-git? [Y/n] " input

		case $input in
		    [yY][eE][sS]|[yY])
				log "Installing mutt-wizard-git"
				su "$username" -c -P "paru -S mutt-wizard-git"
				break
				;;
		    [nN][oO]|[nN])
				log "Not installing mutt-wizard-git"
				break
		    ;;
		    *)
			echo "Invalid input..."
			;;
		esac
	done


	rm -Rf linux-autoinstall/tmp

	echo "install_additional" >> .progress
}

selinux_install() {
	#selinux installation
	log "Installing selinux and hardening the system"
	log "This might take some time...."
	su "$username" -c -P "pacaur -S libsepol libselinux checkpolicy libsemanage mcstrans semodule-utils restorecond" &&
	su "$username" -c -P "pacaur -S secilc setools selinux-python" &&
	su "$username" -c -P "pacaur -S policycoreutils" &&
	su "$username" -c -P "pacaur -S pam-selinux pambase-selinux" &&
	## add gpg key
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key A8041FA839E16E36" && # pam-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key DF6FD971306037D9" && # coreutils-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key 46502EF796917195" && # findutils-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key 80A77F6095CDE47E" && # iproute2-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key 873DB37572A37B36" && # logrotate-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key D3E5F56B6D920D30" && # openssh-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key E9FEEA06A85E3F9D" && # shadow-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key A9F4C021CEA470FB" && # sudo-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key C54CA336CFEB557E" && # systemd-stable
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key E4B71D5EEC39C284" && # util-linux-selinux
	su "$username" -c "gpg --keyserver pool.sks-keyservers.net --recv-key E05AE1478F814C4F" && # dbus-selinux
	su "$username" -c -P "pacaur -S pam-selinux" &&
	## recompile core packages with selinux
	su "$username" -c -P "pacaur -S coreutils-selinux findutils-selinux iproute2-selinux logrotate-selinux openssh-selinux psmisc-selinux shadow-selinux cronie-selinux" &&
	su "$username" -c -P "pacaur -S sudo-selinux" || fatal "Selinux"

	# just in case wheel
	groupadd wheel
	usermod -aG wheel $username

	sudo_setup

	su "$username" -c -P "pacaur -S util-linux-selinux" &&
	su "$username" -c -P "pacaur -S systemd-selinux" &&
	su "$username" -c -P "pacaur -S dbus-selinux" &&
	su "$username" -c -P "pacaur -S selinux-alpm-hook" &&
	su "$username" -c -P "pacaur -S selinux-refpolicy-arch" || fatal "Selinux"
}

dir_setup() {
	grep -q dir_setup .progress &&
		log "Skipping config dir setup" &&
		return

	(mkdir -p /home/"$username"/.config || log ".config exists")
	mkdir -p /home/"$username"/Pictures/Screenshots || log "Screenshots exists"
	
	echo "dir_setup" >> .progress
}

configs() {
	grep -q configs .progress &&
		log "Skipping config setup" &&
		return

	log "Setting up configs and dotfiles"
	cp /linux-autoinstall/system/xorg/* /etc/X11/xorg.conf.d/ &&

	echo "configs" >> .progress
}

user_configs() {
	grep -q user_configs .progress &&
		log "Skipping user config setup" &&
		return

	log "Setting up user configs"
	#sali_userspace_build

	echo "user_configs" >> .progress
}

suckless() {
	[ -d "$HOME/git" ] || mkdir $HOME/git || 
		fatal "Git directory setup"
	cd $HOME/git ||
		fatal "Git directory setup"

	grep -q suckless .progress &&
		log "Skipping suckless tools setup" &&
		return

	log "Setting up suckless"
	git clone https://github.com/inceye/sali-suckless-build.git &&
	cd $HOME/git/sali-suckless-build &&
	./deploy || fatal "Suckless setup"
	git config --global alias.ls "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --all --find-copies -M --stat"

	echo "suckless" >> .progress
}

nvim_conf() {
	[ -d "$HOME/git" ] || mkdir $HOME/git || 
		fatal "Git directory setup"
	cd $HOME/git ||
		fatal "Git directory setup"

	grep -q nvim_conf .progress &&
		log "Skipping suckless tools setup" &&
		return
	git clone https://github.com/inceye/sali-nvim-build.git &&
	cd $HOME/git/sali-nvim-build &&
	./deploy || fatal "Neovim setup"

	log "Setting up nvim"

	echo "nvim_conf" >> ../.progress
}

pulseaudio_conf() {
	grep -q pulseaudio_conf .progress &&
		log "Skipping pulseaudio setup" &&
		return

	while true
	do
		read -r -p "Do you have a bluetooth card? [Y/n] " input

		case $input in
		    [yY][eE][sS]|[yY])
				log "Setting up bluetooth and pulseaudio"
				cp /etc/pulse/system.pa /etc/pulse/system.pa.bac &&
				cp /linux-autoinstall/system/wireless/pulseaudio-bluetooth-mod.pa /etc/pulse/system.pa &&
				cp /linux-autoinstall/system/wireless/main.conf /etc/bluetooth/main.conf || fatal "Bluetooth and pulseaudio"
				break
				;;
		    [nN][oO]|[nN])
				log "Not setting up bluetooth and pulseaudio"
				break
		    ;;
		    *)
			echo "Invalid input..."
			;;
		esac
	done

	echo "pulseaudio_conf" >> .progress
}

alsa_kernel_modules() {
	# Since udev>=171, the OSS emulation modules (snd_seq_oss, snd_pcm_oss, snd_mixer_oss) are not loaded by default
	while true
	do
		read -r -p "Do you want to load OSS emulation modules? [Y/n] " input

		case $input in
		    [yY][eE][sS]|[yY])
				log "Option is not working yet"
				log "You have to load them manually next boot time"
				log "The commands are: modprobe snd_seq_oss snd_pcm_oss snd_mixer_oss"
#				log "Setting up OSS emulation modules"
#				modprobe snd_seq_oss &&
#				modprobe snd_pcm_oss &&
#				modprobe snd_mixer_oss || fatal "Installing OSS modules..."
				break
				;;
		    [nN][oO]|[nN])
				log "Not setting up OSS emulation modules"
				break
		    ;;
		    *)
			echo "Invalid input..."
			;;
		esac
	done

	log "Finished with alsa"

}

systemd_setup() {
	grep -q systemd_setup .progress &&
		log "Skipping systemd setup" &&
		return

	log "Setting up systemd"
	cp /linux-autoinstall/system/services/* /etc/systemd/system/ &&
	systemctl enable lock@"$username" &&
	systemctl enable dhcpcd &&
	systemctl enable bluetooth &&
	systemctl enable ufw &&
	systemctl enable cups &&
	cp /linux-autoinstall/system/systemd/* /etc/systemd/ || fatal "Systemd"

	echo "systemd_setup" >> .progress
}

swap_setup() {
	grep -q swap_setup .progress &&
		log "Skipping swap setup" &&
		return

	log "Setting up swap"
	while true
	do
		read -r -p "Do you want to setup swap? [Y/n] " input
		case $input in
		    [yY][eE][sS]|[yY])
				log "Setting up swap"
				read -r -p "Enter the desired swap size in megabytes (e.g. 4096 will create a 4GiB swap) !!! choose swap bigger than your RAM, so that hibernation does not fail !!!:" swapsize &&
				dd if=/dev/zero of=/swapfile bs=1M count=$swapsize status=progress &&
				chmod 600 /swapfile &&
				mkswap /swapfile &&
				swapon /swapfile || fatal "Swap"
				grubfile="grub.resume"
				break
				;;
		    [nN][oO]|[nN])
				echo "Swap will not be set up!"
				grubfile="grub"
				break
		    ;;
		    *)
			echo "Invalid input..."
			;;
		esac
	done

	echo "swap_setup" >> .progress
}

kernel_config() {
	grep -q kernel_config .progress &&
		log "Skipping kernel configuration" &&
		return

	
	while true
	do
	
	read -r -p "What bootloader do you want to install? ([B]ios/[U]efi)" bootsetup
	case $bootsetup in
		[gG]|[gG][rR][uU][bB])
			log "Setting up BIOS"
			grub-install --target=i386-pc $disk || fatal "Installing GRUB in legacy BIOS mode!"
			break
			;;
		[uU]|[uU][eE][fF][iI])
			log "Setting up UEFI"
			grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB || fatal "Installing GRUB in UEFI mode!"
			break
			;;
		*)
			echo "Invalid input..."
			;;
	esac
	done

	log "Getting disk information"
	cryptuuid=$(blkid | grep "$(echo $disk0)3" | awk '{print $2}' | sed 's/"//g') &&
	rootuuid=$(blkid | grep cryptroot | awk '{print $2}' | sed 's/"//g') || fatal "Getting disk uuid data"

	dgrub=$(sed -s "s/CRYPTDEV/$cryptuuid/" /linux-autoinstall/system/kernel/"$grubfile") &&

	# is combined with usb keyfile logic
	dgrub="${dgrub//KEYFILE/$keyfilegrub}" &&

	dgrub="${dgrub//ROOTDEV/$rootuuid}" &&

	offset=$(sudo filefrag -v /swapfile |  awk '/( )0:( )/{print $4}' | sed 's/\.//g') &&
	dgrub="${dgrub//OFFSET/$offset}" &&
	echo "$dgrub" > /etc/default/grub &&
	grub-mkconfig -o /boot/grub/grub.cfg || fatal "GRUB config!!!!!!!!!!"

	log "Setting up mkinitcpio"
	cp /linux-autoinstall/system/kernel/mkinitcpio.conf /etc/mkinitcpio.conf &&
	mkinitcpio -p linux || fatal "Mkinitcpio linux!!!!!!"
	mkinitcpio -p linux-hardened || fatal "Mkinitcpio linux-hardened!!!!!!!!!!"
	log "Setting up fstab"
	cp /linux-autoinstall/system/kernel/fstab /etc/fstab &&
	
	echo "$rootuuid	/	ext4	rw,relatime	0 1" >> /etc/fstab &&
	bootuuid=$(blkid | grep "$(echo $disk0)2" | awk '{print $2}' | sed 's/"//g') &&
	echo "$bootuuid	/boot	vfat	rw,relatime	0 2" >> /etc/fstab &&
	homeuuid=$(blkid | grep crypthome | awk '{print $2}' | sed 's/"//g') &&
	echo "$homeuuid	/home	ext4	rw,relatime	0 2" >> /etc/fstab &&
	echo "/swapfile	none	swap	defaults	0 0" >> /etc/fstab || fatal "FSTAB!!!!!!!!!!!!!!!!!"
	
	log "Setting up crypttab"
	cp /linux-autoinstall/system/kernel/crypttab /etc/crypttab &&
	
	crypttabuuid=$(blkid | grep "$(echo $disk0)4" | awk '{print $2}' | sed 's/"//g') &&
	echo "crypthome	$crypttabuuid	/$(echo $keypref)_keyfile_home" >> /etc/crypttab || fatal "Crypttab!!!!!"

	echo "kernel_config" >> .progress
}



stage2_install() {
	log "Installing stage2"

	initial

	locale

	set_user

	pacman_setup

	pacman_install

	sudo_setup

	install_additional

	# selinux_install

	dir_setup

	configs

	user_configs

	pulseaudio_conf

	alsa_kernel_modules

	systemd_setup

	swap_setup

	kernel_config

	chown -R "$username":"$username" /home/"$username" || fatal "Chown"

	export -f suckless &&
	su "$username" -c -P "bash -c suckless" || fatal "User setup with suckless function"

	export -f nvim_conf &&
	su "$username" -c -P "bash -c nvim_conf" || fatal "User setup with nvim_conf function"

}

stage2_install
