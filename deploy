#!/bin/bash

# archlinux install script


# logging fn
log() {
	local color_on=$'\e[0;32m'
	local color_off=$'\e[0m'
	echo "${color_on}[$(date)]${color_off} $@" >&2
}

# error fn
fatal() {
	log "$@ Failed!"
	log "Error!"
	log "Exiting."
	exit 1
}

check_inet() {
	ping -q -c 1 1.1.1.1 > /dev/null || ping -q -c 1 1.0.0.1 > /dev/null || ping -q -c 1 inceye.com || fatal "No internet connection detected."
}

get_mirrors() {
	reflector --age 24 --protocol https --sort rate --save /etc/pacman.d/mirrorlist && 
	pacman -Sy || fatal "Install mirrorlist."
}

partition_disk() {
# prep disks
fdisk $disk0 << FDISK_CMDS_PREP || fatal "Format disks."
g
w
FDISK_CMDS_PREP

# start formatting disk
fdisk $disk0 << FDISK_CMDS || fatal "Create partitions"
n
1

+3MiB
n
2

+512MiB
n
3

+$(echo $rootsize)
n
4

+$(echo $homesize)
t
1
4
t
2
1
t
3
20
t
4
20
w
FDISK_CMDS
}

set_crypt() {
rootkfile="/root/$(echo $keypref)keyfile_root"
homekfile="/root/$(echo $keypref)keyfile_home"

dd if=/dev/urandom of="$rootkfile" bs=1024 count=10 &&
dd if=/dev/urandom of="$homekfile" bs=1024 count=10 &&

echo -e $passroot | cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --type luks2 --iter-time=1000 $(echo $disk0)3 &&
echo -e $passroot | cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --type luks2 --iter-time=1000 $(echo $disk0)4 &&
echo -e $passroot | cryptsetup luksAddKey $(echo $disk0)3 "$rootkfile" &&
echo -e $passroot | cryptsetup luksAddKey $(echo $disk0)4 "$homekfile" || fatal "Cryptsetup."
}

copy_key() {
mkdir /mnt0 &&
mount $usb /mnt0 || fatal "Mount USB."
if [ $(df -TH $usb | grep /dev | awk '{print $2}') != "ext4" ]
then
	log "The usb is not an ext4 formatted disk, or the disk isn't valid, the key file will not be copied!!" &&
	keyfilegrub=""&&
	umount /mnt0
	rmdir /mnt0
else
	cp "$rootkfile" /mnt0/ &&
	usbuuid=$(blkid | grep "usb" | awk '{print $2}' | sed 's/"//g') &&
	umount /mnt0 &&
	rmdir /mnt0 &&
	keyfilegrub="$usbuuid:ext4:$(echo $keypref)keyfile_root"
fi
}

unlock_crypt() {
cryptsetup open --key-file="$rootkfile" $(echo $disk0)3 cryptroot &&
cryptsetup open --key-file="$homekfile" $(echo $disk0)4 crypthome || fatal "Unlocking partitions."
}

format_partitions() {
mkfs.ext4 /dev/mapper/cryptroot &&
mkfs.ext4 /dev/mapper/crypthome &&
mkfs.ext4 $(echo $disk0)2 || fatal "Formatting partitions."
}

mount_partitions() {
mount /dev/mapper/cryptroot /mnt &&
mkdir /mnt/boot &&
mkdir /mnt/home &&
mount $(echo $disk0)2 /mnt/boot &&
mount /dev/mapper/crypthome /mnt/home || fatal "Mounting partitions."
}

pacstrapping() {
pacstrap /mnt base linux linux-firmware linux-hardened || fatal "Packstrapping."
}

chrooting() {
cp -R ../arch-conf /mnt/ &&
cp "$homekfile" /mnt/ || fatal "Copy arch-conf and home key."
arch-chroot /mnt /arch-conf/deploy-internal || fatal "Arch-chroot."
}

consent() {
while true
do
	read -r -p "Are you sure you want to install archlinux in disk $disk0? All contents of the disk will be WIPED [Yes/No] " yn

	case $yn in
	    Yes )
			echo "Yes"
			break
			;;
	    No )
			echo "No"
			fatal "You have terminated the script!!!"
			exit 1
	       		;;
	    *)
		echo 'Invalid input... Type "Yes" or "No"'
		;;
	esac
done
}

get_data() {
read -r -p "$1" $2 || fatal "Invalid input."
}

get_passwd() {
while true
do
	read -r -s -p "Enter a backup password for cryptography:" passroot &&
	echo ""
	read -r -s -p "Repeat the backup password for cryptography:" passrootrpt &&
	echo ""
	if [ "$passroot" == "$passrootrpt" ]
	then
		echo "Passwords match, proceeding"
		break
	else
		echo "Passwords don't match, try again"
		continue
	fi
done
}

stage1_install() {

log "Starting stage1 install."
check_inet
get_mirrors

# get disk
get_data "Enter the disk that archlinux will be installed on (e.g. /dev/sdx) " disk0
# get sizes
get_data "Enter the size of the root partition (the swap file will be stored here)-(for fdisk) " rootsize
get_data "Enter the size of the home partition (for fdisk) " homesize

consent

partition_disk

# get crypt
get_passwd
# get keypref
get_data "We will create keyfiles for your new system, if you want to prefix your new keyfiles with some string, so that the script does not overwrite your old keys, enter this string:" keypref

set_crypt

# get usb
log "Sleeping for 10 seconds, insert the USB you wish to copy your keyfile to..."
sleep 10
lsblk
get_data "Enter the usb partition for the keyfile:" usb

copy_key

unlock_crypt

format_partitions

mount_partitions

pacstrapping

chrooting
}
