#!/bin/bash

# archlinux install script


# logging fn
log() {
	local color_on=$'\e[0;32m'
	local color_off=$'\e[0m'
	echo "${color_on}[$(date)]${color_off} $@" >&2
}

# error fn
fatal() {
	local color_fatal=$'\033[0;31m'
	log "${color_fatal} $@ Failed!"
	log "${color_fatal}	Error!"
	log "${color_fatal}	Exiting."
	exit 1
}

check_inet() {
	log "Checking internet connection"
	ping -q -c 1 1.1.1.1 > /dev/null || ping -q -c 1 1.0.0.1 > /dev/null || ping -q -c 1 inceye.com || fatal "No internet connection detected."
}

get_mirrors() {
	grep -q get_mirrors .progress &&
	       log "Skipping mirror setup" &&
	       return
	log "Getting mirrorlist and updating pacman"
	reflector --age 24 --protocol https --sort rate --save /etc/pacman.d/mirrorlist && 
	pacman -Sy || fatal "Install mirrorlist."
	echo "get_mirrors" >> .progress
}

partition_disk() {
	grep -q partition_disk .progress &&
	       log "Skipping disk partitioning" &&
	       return
	# get sizes
	get_data "Enter the size of the root partition (the swap file will be stored here)-(for fdisk) " rootsize
	get_data "Enter the size of the home partition (for fdisk) " homesize

	# prep disks
	log "Formatting disk"
	fdisk "$disk" << FDISK_CMDS_PREP || fatal "Format disks."
g
w
FDISK_CMDS_PREP
	
	# start formatting disk
	fdisk "$disk" << FDISK_CMDS || fatal "Create partitions"
n
1

+3MiB
n
2

+512MiB
n
3

+$(echo "$rootsize")
n
4

+$(echo "$homesize")
t
1
4
t
2
1
t
3
20
t
4
20
w
FDISK_CMDS
	echo "partition_disk" >> .progress
}

set_crypt() {
	grep -q set_crypt .progress &&
	       log "Skipping cryptography setup" &&
	       return

	log "Setting up cryptography"
	homekfile="/root/$(echo "$keypref")_keyfile_home"
	dd if=/dev/urandom of="$homekfile" bs=1024 count=10 &&
	
	echo -e "$passroot" | cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --type luks2 --iter-time=1000 $(echo "$disk0")3 &&
	echo -e "$passroot" | cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --type luks2 --iter-time=1000 $(echo "$disk0")4 &&
	echo -e "$passroot" | cryptsetup luksAddKey $(echo "$disk0")4 "$homekfile" || fatal "Cryptsetup."

	echo "set_crypt" >> .progress
}

copy_key_support() {
	grep -q copy_key_support .progress &&
	       log "Skipping key copy support" &&
	       return

	log "Adding key copy support"
	rootkfile="/root/$(echo "$keypref")_keyfile_root"
	dd if=/dev/urandom of="$rootkfile" bs=1024 count=10 &&
	echo -e "$passroot" | cryptsetup luksAddKey $(echo "$disk0")3 "$rootkfile" || fatal "Key copy support"

	echo "copy_key_support" >> .progress
}

copy_key() {
	# get usb
	log "Sleeping for 10 seconds, insert the USB you wish to copy your keyfile to..."
	rootkfile="/root/$(echo "$keypref")_keyfile_root"
	sleep 10
	lsblk
	get_data "Enter the usb partition for the keyfile:" usb
	log "Copying key"
	mkdir /mnt0 || umount /mnt0
	mount "$usb" /mnt0 || fatal "Mount USB."
	if [ $(df -TH "$usb" | grep /dev | awk '{print $2}') != "ext4" ]
	then
		log "The usb is not an ext4 formatted disk, or the disk isn't valid, the key file will not be copied!!" &&
		keyfilegrub=""&&
		umount /mnt0
		rmdir /mnt0
	else
		cp "$rootkfile" /mnt0/ &&
		usbuuid=$(blkid | grep "$usb" | awk '{print $2}' | sed 's/"//g') &&
		umount /mnt0 &&
		rmdir /mnt0 &&
		keyfilegrub="$usbuuid:ext4:$(echo "$keypref")_keyfile_root" &&
		log "Keyfile is successfully copied"|| fatal "Copy keyfile to usb"	
	fi
}

unlock_crypt() {
	grep -q unlock_crypt .progress &&
	       log "Skipping partition unlocking" &&
	       return

	log "Decrypting partitions"
	echo -e "$passroot" | cryptsetup open $(echo "$disk0")3 cryptroot &&
	passroot="" &&
	cryptsetup open --key-file="$homekfile" $(echo "$disk0")4 crypthome || fatal "Unlocking partitions."

	echo "unlock_crypt" >> .progress
}

format_partitions() {
	grep -q format_partitions .progress &&
	       log "Skipping partition formatting" &&
	       return

	log "Formatting partitions"
	mkfs.ext4 /dev/mapper/cryptroot &&
	mkfs.ext4 /dev/mapper/crypthome &&
	mkfs.ext4 $(echo "$disk0")2 || fatal "Formatting partitions."

	echo "format_partitions" >> .progress
}

mount_partitions() {
	grep -q mount_partitions .progress &&
	       log "Skipping partition mounting" &&
	       return

	log "Mounting partitions"
	mount /dev/mapper/cryptroot /mnt &&
	mkdir /mnt/boot &&
	mkdir /mnt/home &&
	mount $(echo "$disk0")2 /mnt/boot &&
	mount /dev/mapper/crypthome /mnt/home || fatal "Mounting partitions."

	echo "mount_partitions" >> .progress
}

pacstrapping() {
	grep -q pacstrapping .progress &&
	       log "Skipping pacstrap" &&
	       return

	log "Pacstrapping"
	pacstrap /mnt base linux linux-firmware linux-hardened || fatal "Packstrapping."

	echo "pacstrapping" >> .progress
}

chrooting() {
	log "Chrooting"
	homekfile="/root/$(echo "$keypref")_keyfile_home"
	grep -q copy_over_chroot .progress ||
		cp -R ../sali /mnt/linux-autoinstall || fatal "Copy linux-autoinstall and home key."
	grep -q copy_over_chroot .progress ||
		cp "$homekfile" /mnt/ || fatal "Copy linux-autoinstall and home key."

	echo "copy_over_chroot" >> .progress

	arch-chroot /mnt /linux-autoinstall/deploy-internal $disk $disk0 $keyfilegrub $keypref || fatal "Arch-chroot."
}

ask_key_copy() {
	while true
	do
		read -r -p "Do you want to copy keyfiles to usb for automatic crypto? [Yes/No] " input
	
		case $input in
		    [yY][eE][sS]|[yY])
				log "Yes"
				log "Started the copying process"
				copy_key_support
				copy_key
				break
				;;
		    [nN][oO]|[nN])
				log "No"
				log "Terminated the copying process"
				break
		    ;;
		    *)
			echo 'Invalid input...'
			;;
		esac
	done
}

ask_get_mirrors() {
	grep -q ask_get_mirrors .progress &&
	       log "Skipping mirror setup" &&
	       return

	while true
	do
		read -r -p "Do you want to set up optimal mirrors? Or set them up manually? This might take a long time. [Yes/Set/No] " input
	
		case $input in
		    [yY][eE][sS]|[yY])
				log "Getting mirrors"
				get_mirrors >/dev/null 2>&1
				break
				;;
				[sS][eE][tT]|[s])
				log "Setting up mirorrs"
				vim /etc/pacman.d/mirrorlist
				break
				;;
		    [nN][oO]|[nN])
				log "Not setting up mirrors."
				log "The default ones are going to be used."
				break
		    ;;
		    *)
			echo 'Invalid input...'
			;;
		esac
	done
	echo "ask_get_mirrors" >> .progress
}

consent() {
	while true
	do
		read -r -p "Are you sure you want to install archlinux in disk $disk0? All contents of the disk will be WIPED [Yes/No] " input
	
		case $input in
		    Yes)
				echo "Yes"
				log "Proceding"
				break
				;;
		    No)
				echo "No"
				fatal "You have terminated the script!!!"
				exit 1
		    ;;
		    *)
			echo 'Invalid input... Type "Yes" or "No"'
			;;
		esac
	done
}

get_data() {
	read -r -p "$1" "$2" || fatal "Invalid input."
}

get_passwd() {
	while true
	do
		read -r -s -p "Enter a password for cryptography:" passroot &&
		echo ""
		read -r -s -p "Repeat the password for cryptography:" passrootrpt &&
		echo ""
		if [ "$passroot" == "$passrootrpt" ]
		then
			log "Passwords match, proceeding"
			passrootrpt="" || fatal "Error with password setup"
			break
		else
			log "${color_fatal} Passwords don't match, try again"
			continue
		fi
	done
}

get_disk() {
#	grep -q get_disk .progress &&
#	       log "Skipping disk information" &&
#	       return
	get_data "Enter the disk that archlinux will be installed on (e.g. /dev/sdx) " disk

	case $disk in
		*"sd"*)
			log "Got a /dev/sd* disk!!!"
			disk0="${disk}"
			;;
		*"nvme"*)
			log "Got a /dev/nvme* disk!!!"
			disk0="${disk}p"
			;;
		*)
			fatal "Invalid input... (we might not support a such a disk)"
			exit 1
			;;
	esac
	echo "get_disk" >> .progress
}

reboot_logic() {
	while true
	do
		read -r -p "Do you want to reboot? [Y/n] " input

		case $input in
		    [yY][eE][sS]|[yY])
				echo "Yes"
				sudo reboot
				;;
		    [nN][oO]|[nN])
				echo "No"
				echo "The script is finished, don't forget to reboot."
				break
				;;
		    *)
			echo "Invalid input..."
			;;
		esac
	done
}

stage1_install() {

	log "Starting stage1 install..."

	check_inet
	ask_get_mirrors

	# get disk
	#get_data "Enter the disk that archlinux will be installed on (e.g. /dev/sdx) " disk0
	get_disk
	consent

	partition_disk

	# get crypt
	get_passwd
	# get keypref
	get_data "We will create keyfiles for your new system, if you want to prefix your new keyfiles with some string, so that the script does not overwrite your old keys, enter this string:" keypref

	set_crypt

	# copy key file support
	keyfilegrub=""

	ask_key_copy

	unlock_crypt

	format_partitions

	mount_partitions

	pacstrapping

	chrooting
	
	reboot_logic
}

stage1_install
